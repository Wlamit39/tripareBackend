import * as otel from '@opentelemetry/api';
import { Resource } from '@opentelemetry/resources';
import { SpanExporter } from '@opentelemetry/sdk-trace-base';
import { Context as ActivityContext } from '@temporalio/activity';
import { ActivityExecuteInput, ActivityInboundCallsInterceptor, InjectedSink, Next } from '@temporalio/worker';
import { OpenTelemetryWorkflowExporter } from '../workflow';
export interface InterceptorOptions {
    readonly tracer?: otel.Tracer;
}
/**
 * Intercepts calls to start an Activity.
 *
 * Wraps the operation in an opentelemetry Span and links it to a parent Span context if one is
 * provided in the Activity input headers.
 */
export declare class OpenTelemetryActivityInboundInterceptor implements ActivityInboundCallsInterceptor {
    protected readonly ctx: ActivityContext;
    protected readonly tracer: otel.Tracer;
    constructor(ctx: ActivityContext, options?: InterceptorOptions);
    execute(input: ActivityExecuteInput, next: Next<ActivityInboundCallsInterceptor, 'execute'>): Promise<unknown>;
}
/**
 * Takes an opentelemetry SpanExporter and turns it into an injected Workflow span exporter sink
 */
export declare function makeWorkflowExporter(exporter: SpanExporter, resource: Resource): InjectedSink<OpenTelemetryWorkflowExporter>;
